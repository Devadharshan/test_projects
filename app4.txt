
### **Imports**

```python
import subprocess
import re
from datetime import datetime
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
```
- **`subprocess`**: This module allows you to run system commands from within Python.
- **`re`**: The `re` module is used for regular expressions, which help in searching and parsing text.
- **`datetime`**: This module is used to manipulate dates and times.
- **`prometheus_client`**: These are Prometheus client libraries for creating and pushing custom metrics.

### **Function: `get_autosys_job_details(job_name)`**

```python
def get_autosys_job_details(job_name):
    try:
        # Run the Autosys command to get the job details
        result = subprocess.run(['autorep', '-J', job_name], capture_output=True, text=True, check=True)
        
        # Print result for debugging
        print(result.stdout)  # Debugging
        
        # Adjust the regex to capture 'SU' for success and other statuses
        status_match = re.search(r'Status:\s+(\w+)', result.stdout)
        start_date_match = re.search(r'Start Dep:\s+([\d\/:\s]+)', result.stdout)
        end_date_match = re.search(r'End Dep:\s+([\d\/:\s]+)', result.stdout)
        
        status = status_match.group(1) if status_match else "UNKNOWN"
        start_date = start_date_match.group(1).strip() if start_date_match else None
        end_date = end_date_match.group(1).strip() if end_date_match else None
        
        return status, start_date, end_date
    except subprocess.CalledProcessError as e:
        return "ERROR", None, None
```

- **Purpose**: This function retrieves the status, start date, and end date of a specified Autosys job.
- **`subprocess.run()`**: Executes the `autorep -J job_name` command, which fetches details about the job from Autosys.
- **Regular Expressions (`re.search`)**:
  - **`status_match`**: Searches for the status of the job in the output.
  - **`start_date_match`**: Extracts the start date from the output.
  - **`end_date_match`**: Extracts the end date from the output.
- **Return**: Returns the status, start date, and end date of the job. If an error occurs, it returns `"ERROR", None, None`.

### **Function: `get_jobs_by_pattern(pattern)`**

```python
def get_jobs_by_pattern(pattern):
    try:
        # Run the Autosys command to list jobs based on the pattern
        result = subprocess.run(['autorep', '-J', pattern], capture_output=True, text=True, check=True)
        
        # Process the command output to extract job names
        job_names = re.findall(r'^(\S+)', result.stdout, re.MULTILINE)
        return job_names
    except subprocess.CalledProcessError as e:
        return []
```

- **Purpose**: This function fetches a list of Autosys jobs that match a given pattern.
- **`subprocess.run()`**: Executes the `autorep -J pattern` command, which lists all jobs matching the given pattern.
- **`re.findall()`**: Extracts job names from the command output.
- **Return**: Returns a list of job names. If an error occurs, it returns an empty list.

### **Function: `main(pattern, push_gateway_url)`**

```python
def main(pattern, push_gateway_url):
    job_names = get_jobs_by_pattern(pattern)
    if not job_names:
        print("No jobs found or error occurred.")
        return

    # Create a registry
    registry = CollectorRegistry()
    
    # Define Gauges for status, start date, and end date
    status_gauge = Gauge('autosys_job_status', 'Autosys job status', ['job_name'], registry=registry)
    start_date_gauge = Gauge('autosys_job_start_timestamp', 'Autosys job start date as timestamp', ['job_name'], registry=registry)
    end_date_gauge = Gauge('autosys_job_end_timestamp', 'Autosys job end date as timestamp', ['job_name'], registry=registry)

    # Add job details to the gauges
    for job_name in job_names:
        status, start_date, end_date = get_autosys_job_details(job_name)
        
        # Convert dates to UNIX timestamps for Prometheus
        start_timestamp = int(datetime.strptime(start_date, '%m/%d/%y %H:%M:%S').timestamp()) if start_date else None
        end_timestamp = int(datetime.strptime(end_date, '%m/%d/%y %H:%M:%S').timestamp()) if end_date else None
        
        # Update Gauges based on job status
        if status == 'SU':
            status_gauge.labels(job_name=job_name).set(1)
        elif status == 'FA':
            status_gauge.labels(job_name=job_name).set(0)
        elif status == 'OI':
            status_gauge.labels(job_name=job_name).set(2)
        elif status == 'OH':
            status_gauge.labels(job_name=job_name).set(3)
        elif status == 'TE':
            status_gauge.labels(job_name=job_name).set(4)
        else:
            status_gauge.labels(job_name=job_name).set(-1)  # For unknown or error states
        
        if start_timestamp:
            start_date_gauge.labels(job_name=job_name).set(start_timestamp)
        if end_timestamp:
            end_date_gauge.labels(job_name=job_name).set(end_timestamp)

    # Push all the metrics to the Pushgateway under a single Prometheus job
    push_to_gateway(push_gateway_url, job='autosys_jobs_monitor', registry=registry)
    print("Metrics pushed to Pushgateway.")
```

- **Purpose**: This function gathers the details of all jobs matching a pattern and pushes the metrics to Prometheus via the Pushgateway.
- **`get_jobs_by_pattern(pattern)`**: Retrieves the list of jobs matching the given pattern.
- **`CollectorRegistry()`**: Creates a registry to hold all the metrics.
- **`Gauge`**: Defines gauges for job status, start timestamp, and end timestamp. A gauge is a type of Prometheus metric that represents a single numerical value that can arbitrarily go up and down.
- **Loop through `job_names`**:
  - **`get_autosys_job_details(job_name)`**: Retrieves the status, start date, and end date for each job.
  - **`datetime.strptime()`**: Converts the start and end dates to UNIX timestamps.
  - **Update Gauges**: Sets the gauge values based on the job status, start date, and end date.
- **`push_to_gateway()`**: Pushes all the collected metrics to the Prometheus Pushgateway under the job name `autosys_jobs_monitor`.

### **Example Usage**

```python
job_pattern = 'YOUR_JOB_PATTERN*'
push_gateway_url = 'http://your-pushgateway-url:9091'
main(job_pattern, push_gateway_url)
```

- **`job_pattern`**: The pattern to match the Autosys jobs.
- **`push_gateway_url`**: The URL of the Pushgateway where the metrics will be pushed.
- **`main()`**: Runs the process to gather metrics and push them to the Pushgateway.

### **Summary**
- The script runs a command to retrieve job details from Autosys.
- It processes the output to extract job statuses and timestamps.
- It pushes these details as metrics to Prometheus via the Pushgateway.
- Grafana can then use these metrics to create dashboards for monitoring Autosys jobs.