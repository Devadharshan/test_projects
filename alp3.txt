Creating a fully functional chatbot application with a frontend and backend involves several components. Below, I'll provide a simplified example using Flask for the backend and HTML/JavaScript for the frontend. This example won't include a full chatbot AI but will demonstrate how to handle user input and selected options.

### Backend (Flask)

1. **Setup Flask**: Create a file `app.py` for your Flask application.

```python
from flask import Flask, request, jsonify, render_template

app = Flask(__name__)

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process():
    data = request.get_json()
    message = data['message']
    options = data['options']

    # Process options (just an example)
    actions = []
    for option in options:
        actions.append(f"You chose {option}")

    response = {
        'message': message,
        'actions': actions
    }

    return jsonify(response)

if __name__ == '__main__':
    app.run(debug=True)
```

### Frontend (HTML/JavaScript)

2. **HTML Template**: Create an `index.html` file for the frontend interface.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot App</title>
    <style>
        /* Basic styles for demo purposes */
        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        #chat-messages {
            height: 300px;
            overflow-y: scroll;
            border: 1px solid #eee;
            padding: 10px;
        }
        .message {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Chatbot App</h2>
        <div id="chat-messages">
            <!-- Messages will be displayed here -->
        </div>
        <div>
            <input type="text" id="user-input" placeholder="Type your message...">
            <button onclick="sendMessage()">Send</button>
        </div>
        <div>
            <p>Select options:</p>
            <label><input type="checkbox" class="option" value="Option 1"> Option 1</label>
            <label><input type="checkbox" class="option" value="Option 2"> Option 2</label>
            <label><input type="checkbox" class="option" value="Option 3"> Option 3</label>
            <button onclick="sendOptions()">Submit Options</button>
        </div>
    </div>

    <script>
        function sendMessage() {
            var userInput = document.getElementById('user-input').value;
            var chatMessages = document.getElementById('chat-messages');

            // Display user message in chat
            var userMessageElement = document.createElement('div');
            userMessageElement.classList.add('message');
            userMessageElement.innerHTML = `<strong>You:</strong> ${userInput}`;
            chatMessages.appendChild(userMessageElement);

            // Example: send message to backend (POST request)
            fetch('/process', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: userInput,
                    options: []
                }),
            })
            .then(response => response.json())
            .then(data => {
                // Display bot response in chat
                var botMessageElement = document.createElement('div');
                botMessageElement.classList.add('message');
                botMessageElement.innerHTML = `<strong>Bot:</strong> ${data.message}`;

                chatMessages.appendChild(botMessageElement);

                // Display actions (just an example)
                data.actions.forEach(action => {
                    var actionElement = document.createElement('div');
                    actionElement.classList.add('message');
                    actionElement.innerHTML = `<strong>Action:</strong> ${action}`;
                    chatMessages.appendChild(actionElement);
                });
            })
            .catch(error => console.error('Error:', error));

            // Clear user input
            document.getElementById('user-input').value = '';
        }

        function sendOptions() {
            var selectedOptions = [];
            document.querySelectorAll('.option:checked').forEach(option => {
                selectedOptions.push(option.value);
            });

            // Example: send options to backend (POST request)
            fetch('/process', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: '',
                    options: selectedOptions
                }),
            })
            .then(response => response.json())
            .then(data => {
                // Display bot response in chat (this is just an example)
                var botMessageElement = document.createElement('div');
                botMessageElement.classList.add('message');
                botMessageElement.innerHTML = `<strong>Bot:</strong> ${data.message}`;

                chatMessages.appendChild(botMessageElement);

                // Display actions (just an example)
                data.actions.forEach(action => {
                    var actionElement = document.createElement('div');
                    actionElement.classList.add('message');
                    actionElement.innerHTML = `<strong>Action:</strong> ${action}`;
                    chatMessages.appendChild(actionElement);
                });
            })
            .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>
```

### Explanation:

- **Backend (`app.py`)**:
  - Defines routes for rendering the initial HTML (`/`) and processing user inputs (`/process`).
  - When receiving a POST request at `/process`, it retrieves the user message and selected options, processes them (in this case, simply returns them as a response).

- **Frontend (`index.html`)**:
  - Displays a basic chat interface with an input box for user messages and checkboxes for options.
  - Sends user messages and selected options to the backend (`/process`) via JavaScript's `fetch()` function.
  - Receives responses from the backend and updates the chat interface accordingly.

### Running the Application:

1. Save `app.py` and `index.html` in the same directory.
2. Install Flask (`pip install flask`) if you haven't already.
3. Run the Flask application:
   ```bash
   python app.py
   ```
4. Open a web browser and go to `http://localhost:5000` to see the chatbot application.

This example provides a basic framework that you can expand upon with actual natural language processing for the chatbot and more complex actions based on user selections.